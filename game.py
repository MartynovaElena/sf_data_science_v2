#second commit
##
=======
>>>>>>> bb627760dcae3c7b21022db6e62ff58023ddc13a
# y - случайно сгенерированное число, которое нужно угадать.
# t1 - левая граница закрытого интервала, в котором находится y.
# t2 - правая граница закрытого интервала, в котором находится y.
# z - переменная, стремящаяся к решению (т.е. к y), predict_number.
# lef - левая граница интервала, в котором находится z.
# rig - правая граница интервала, в котором находится z.
# n - количество случайно сгенерированных чисел (повторений), n=1000.
# m - количество угадываний для одного сгенерированного числа (число попыток), m<20.
# r=sum(m(i))/n - среднее количество попыток, суммирование ведется от 1 до n.
import numpy as np
def score_game(t1,t2,n):
    count_ls = [] # Создание списка количества попыток
    for i in range(0,n):
        y = np.random.randint(t1,t2+1) # Компьютер загадывает число
        print(f'Загаданное число = {y}')
        lef=t1
        rig=t2
        m = 0 # Обнуляем счетчик для нового числа
        while True:
            m += 1
            z=round((lef+rig)/2)
            if z > y:
                rig=z
                #print("Число должно быть меньше!")
                #print('m=',m,'z=',z,'y=',y,'lef=',lef,'rig=',rig)
            elif z < y:
                lef=z
                #print("Число должно быть больше!")
                # print('m=',m,'z=',z,'y=',y,'lef=',lef,'rig=',rig)
            else:
                print(f"Угаданное число = {z}")
                print(f"Число {y} угадано за {m} попыток")
                break
        count_ls.append(m)
    r=sum(count_ls)/n # Оценка среднего количества попыток
    # print(f"Среднее количество попыток угадывания для {n} чисел равно {r}")
    return(r)
n = 5
t1 = 0
t2 = 100
print(f"Среднее количество попыток угадывания для {n} чисел равно {score_game(t1,t2,n)}")